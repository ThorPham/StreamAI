"use strict";(self.webpackChunkneo_dev_portal=self.webpackChunkneo_dev_portal||[]).push([[1749],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),f=u(n),m=i,d=f["".concat(s,".").concat(m)]||f[m]||p[m]||a;return n?r.createElement(d,o(o({ref:t},l),{},{components:n})):r.createElement(d,o({ref:t},l))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=f;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},22745:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return l},default:function(){return f}});var r=n(87462),i=n(63366),a=(n(67294),n(3905)),o=["components"],c={},s="Runtime.GetNotifications Method",u={unversionedId:"n3/reference/scapi/framework/services/Runtime/GetNotifications",id:"n3/reference/scapi/framework/services/Runtime/GetNotifications",isDocsHomePage:!1,title:"Runtime.GetNotifications Method",description:"Gets all notifications of the given contract execution.",source:"@site/docs/n3/reference/scapi/framework/services/Runtime/GetNotifications.md",sourceDirName:"n3/reference/scapi/framework/services/Runtime",slug:"/n3/reference/scapi/framework/services/Runtime/GetNotifications",permalink:"/StreamAI/docs/n3/reference/scapi/framework/services/Runtime/GetNotifications",editUrl:"https://github.com/neo-project/neo-dev-portal/blob/master/docs/n3/reference/scapi/framework/services/Runtime/GetNotifications.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Runtime.CheckWitness Method",permalink:"/StreamAI/docs/n3/reference/scapi/framework/services/Runtime/CheckWitness"},next:{title:"Runtime.Log Method",permalink:"/StreamAI/docs/n3/reference/scapi/framework/services/Runtime/Log"}},l=[{value:"Syntax",id:"syntax",children:[]},{value:"Example",id:"example",children:[]}],p={toc:l};function f(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"runtimegetnotifications-method"},"Runtime.GetNotifications Method"),(0,a.kt)("p",null,"Gets all notifications of the given contract execution."),(0,a.kt)("p",null,"Namespace: ",(0,a.kt)("a",{parentName:"p",href:"/StreamAI/docs/n3/reference/scapi/framework/services"},"Neo.SmartContract.Framework.Services")),(0,a.kt)("p",null,"Assembly: Neo.SmartContract.Framework"),(0,a.kt)("h2",{id:"syntax"},"Syntax"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"public static extern Notification[] GetNotifications(UInt160 hash = null)\n")),(0,a.kt)("p",null,"Parameters:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"hash: Contract script hash as a byte array of length 20. When the array values are all 0, all notifications that currently exists are returned. ")),(0,a.kt)("p",null,"Return value: All notifications during the contract execution."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"public class Contract1 : SmartContract.Framework.SmartContract\n{\n    public static void Main()\n    {\n        Notification[] result1 = Runtime.GetNotifications();\n        byte[] hash = { 2, 123, 48, 51, 62, 13, 14, 101, 82, 174, 109, 29, 169, 249, 64, 159, 85, 30, 53, 238};\n        Notification[] result2 = Runtime.GetNotifications((UInt160)hash);\n    }\n}\n")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/StreamAI/docs/n3/reference/scapi/framework/services/Runtime"},"Back")))}f.isMDXComponent=!0}}]);