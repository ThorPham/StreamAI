"use strict";(self.webpackChunkneo_dev_portal=self.webpackChunkneo_dev_portal||[]).push([[9196],{3905:function(t,e,r){r.d(e,{Zo:function(){return p},kt:function(){return d}});var n=r(67294);function a(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function c(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function o(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?c(Object(r),!0).forEach((function(e){a(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function l(t,e){if(null==t)return{};var r,n,a=function(t,e){if(null==t)return{};var r,n,a={},c=Object.keys(t);for(n=0;n<c.length;n++)r=c[n],e.indexOf(r)>=0||(a[r]=t[r]);return a}(t,e);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(t);for(n=0;n<c.length;n++)r=c[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(a[r]=t[r])}return a}var i=n.createContext({}),s=function(t){var e=n.useContext(i),r=e;return t&&(r="function"==typeof t?t(e):o(o({},e),t)),r},p=function(t){var e=s(t.components);return n.createElement(i.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},m=n.forwardRef((function(t,e){var r=t.components,a=t.mdxType,c=t.originalType,i=t.parentName,p=l(t,["components","mdxType","originalType","parentName"]),m=s(r),d=a,f=m["".concat(i,".").concat(d)]||m[d]||u[d]||c;return r?n.createElement(f,o(o({ref:e},p),{},{components:r})):n.createElement(f,o({ref:e},p))}));function d(t,e){var r=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var c=r.length,o=new Array(c);o[0]=m;var l={};for(var i in e)hasOwnProperty.call(e,i)&&(l[i]=e[i]);l.originalType=t,l.mdxType="string"==typeof t?t:a,o[1]=l;for(var s=2;s<c;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},27779:function(t,e,r){r.r(e),r.d(e,{frontMatter:function(){return l},contentTitle:function(){return i},metadata:function(){return s},toc:function(){return p},default:function(){return m}});var n=r(87462),a=r(63366),c=(r(67294),r(3905)),o=["components"],l={},i="Contract Class",s={unversionedId:"n3/reference/scapi/framework/services/Contract",id:"n3/reference/scapi/framework/services/Contract",isDocsHomePage:!1,title:"Contract Class",description:"The class representing a contract.",source:"@site/docs/n3/reference/scapi/framework/services/Contract.md",sourceDirName:"n3/reference/scapi/framework/services",slug:"/n3/reference/scapi/framework/services/Contract",permalink:"/StreamAI/docs/n3/reference/scapi/framework/services/Contract",editUrl:"https://github.com/neo-project/neo-dev-portal/blob/master/docs/n3/reference/scapi/framework/services/Contract.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"CallFlags Enumerator",permalink:"/StreamAI/docs/n3/reference/scapi/framework/services/CallFlags"},next:{title:"Contract.Call Method",permalink:"/StreamAI/docs/n3/reference/scapi/framework/services/Contract/Call"}},p=[{value:"Syntax",id:"syntax",children:[]},{value:"Attributes",id:"attributes",children:[]},{value:"Methods",id:"methods",children:[]},{value:"Constructor",id:"constructor",children:[]}],u={toc:p};function m(t){var e=t.components,r=(0,a.Z)(t,o);return(0,c.kt)("wrapper",(0,n.Z)({},u,r,{components:e,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"contract-class"},"Contract Class"),(0,c.kt)("p",null,"The class representing a contract."),(0,c.kt)("p",null,"Namespace\uff1a",(0,c.kt)("a",{parentName:"p",href:"/StreamAI/docs/n3/reference/scapi/framework/services"},"Neo.SmartContract.Framework.Services")),(0,c.kt)("p",null,"Assembly: Neo.SmartContract.Framework"),(0,c.kt)("h2",{id:"syntax"},"Syntax"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cs"},"public class Contract\n")),(0,c.kt)("h2",{id:"attributes"},"Attributes"),(0,c.kt)("table",null,(0,c.kt)("thead",{parentName:"table"},(0,c.kt)("tr",{parentName:"thead"},(0,c.kt)("th",{parentName:"tr",align:null},"Name"),(0,c.kt)("th",{parentName:"tr",align:null},"Description"))),(0,c.kt)("tbody",{parentName:"table"},(0,c.kt)("tr",{parentName:"tbody"},(0,c.kt)("td",{parentName:"tr",align:null},"Id"),(0,c.kt)("td",{parentName:"tr",align:null},"Contract Id. The native contract ID is a negative integer, and the normal contract ID is a positive integer.")),(0,c.kt)("tr",{parentName:"tbody"},(0,c.kt)("td",{parentName:"tr",align:null},"UpdateCounter"),(0,c.kt)("td",{parentName:"tr",align:null},"Contract update counter")),(0,c.kt)("tr",{parentName:"tbody"},(0,c.kt)("td",{parentName:"tr",align:null},"Hash"),(0,c.kt)("td",{parentName:"tr",align:null},"Contract hash, which is determined by the deployer's script hash, the contract NEF checkcode, and the contract name.")),(0,c.kt)("tr",{parentName:"tbody"},(0,c.kt)("td",{parentName:"tr",align:null},"Nef"),(0,c.kt)("td",{parentName:"tr",align:null},"Nef")),(0,c.kt)("tr",{parentName:"tbody"},(0,c.kt)("td",{parentName:"tr",align:null},"Manifest"),(0,c.kt)("td",{parentName:"tr",align:null},"Json strings that represents the contract Manifest")))),(0,c.kt)("h2",{id:"methods"},"Methods"),(0,c.kt)("table",null,(0,c.kt)("thead",{parentName:"table"},(0,c.kt)("tr",{parentName:"thead"},(0,c.kt)("th",{parentName:"tr",align:null},"Name"),(0,c.kt)("th",{parentName:"tr",align:null},"Description"))),(0,c.kt)("tbody",{parentName:"table"},(0,c.kt)("tr",{parentName:"tbody"},(0,c.kt)("td",{parentName:"tr",align:null},(0,c.kt)("a",{parentName:"td",href:"/StreamAI/docs/n3/reference/scapi/framework/services/Contract/Call"},"Call(UInt160 scriptHash, string method, object[] arguments)")),(0,c.kt)("td",{parentName:"tr",align:null},"Invokes the contract")),(0,c.kt)("tr",{parentName:"tbody"},(0,c.kt)("td",{parentName:"tr",align:null},(0,c.kt)("a",{parentName:"td",href:"/StreamAI/docs/n3/reference/scapi/framework/services/Contract/GetCallFlags"},"GetCallFlags()")),(0,c.kt)("td",{parentName:"tr",align:null},"Gets the CallFlag of the contract")),(0,c.kt)("tr",{parentName:"tbody"},(0,c.kt)("td",{parentName:"tr",align:null},(0,c.kt)("a",{parentName:"td",href:"/StreamAI/docs/n3/reference/scapi/framework/services/Contract/CreateStandardAccount"},"CreateStandardAccount()")),(0,c.kt)("td",{parentName:"tr",align:null},"Generate a script hash of standard account with public key")),(0,c.kt)("tr",{parentName:"tbody"},(0,c.kt)("td",{parentName:"tr",align:null},"CreateMultisigAccount(int, params Cryptography.ECC.ECPoint[])"),(0,c.kt)("td",{parentName:"tr",align:null},"Generate a script hash of multi-signature accounts based on the public key list and minimum number of signatures")))),(0,c.kt)("h2",{id:"constructor"},"Constructor"),(0,c.kt)("p",null,"The Contract object can be constructed through ",(0,c.kt)("a",{parentName:"p",href:"/StreamAI/docs/n3/reference/scapi/framework/native/ContractManagement/GetContract"},"ContractManagement.GetContract(UInt60 hash)"),"."),(0,c.kt)("p",null," ",(0,c.kt)("a",{parentName:"p",href:"/StreamAI/docs/n3/reference/scapi/framework/native/ContractManagement/Deploy"},"ContractManagement.Deploy(byte[] nefFile, string manifest)")," publishes the contract onto the blockchain and returns a contract object."))}m.isMDXComponent=!0}}]);